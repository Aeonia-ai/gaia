[pytest]
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*
addopts = 
    -v
    --tb=short
    --strict-markers
    --disable-warnings
    -m "not load"
markers =
    integration: Integration tests
    unit: Unit tests  
    compatibility: LLM Platform compatibility tests
    performance: Performance tests
    slow: Slow running tests
    sequential: Tests that must run sequentially (not parallel)
    resource_intensive: Tests that create/delete external resources
    host_only: Tests that must run from host with Docker access
    container_safe: Tests that run inside containers
    requires_redis: Tests needing Redis connection
    requires_db: Tests needing database access
    xdist_group: Tests that must run in a specific xdist group to avoid shared-resource conflicts
    browser: Playwright browser tests
    web_browser: Web UI browser tests using Playwright
    api_heavy: API tests with multiple service calls
    standard: Standard integration tests with minimal resource usage
    load: Load tests that consume API quotas and test concurrent behavior
    antipattern: Tests skipped due to anti-pattern violations (should be fixed or removed)
    not_implemented: Tests for features not yet implemented
    known_bug: Tests skipped due to known bugs (should have issue reference)
    requires_env: Tests requiring specific environment variables or setup
    deprecated: Tests for deprecated functionality
    architecture_decision: Tests blocked pending architecture decisions
asyncio_mode = auto

# Logging configuration
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s - %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# File logging
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(name)s - %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S
